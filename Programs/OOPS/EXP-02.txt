#include <iostream>
#include <cstring>
using namespace std;

class person_additional_info {
    char address[20], license[20], insurance[20];
    long int contact;

public:
    person_additional_info() { // Default constructor
        strcpy(address, "XYZ");
        strcpy(license, "XY-0000000000");
        strcpy(insurance, "XY00000000X");
        contact = 0;
    }

    ~person_additional_info() { // Destructor
        cout << "I am in Destructor for person_additional_info" << endl;
    }

    friend class person; // Declaration Friend class
};

// Definition of friend class
class person {
    char name[20], dob[10], blood[10];
    float ht, wt;
    static int count; // Static variable
    person_additional_info* pai;

public:
    person() { // Default constructor
        strcpy(name, "XYZ");
        strcpy(dob, "dd/mm/yy");
        strcpy(blood, "A+");
        ht = 0;
        wt = 0;
        pai = new person_additional_info;
    }

    person(const person& p1) { // Copy constructor
        strcpy(name, p1.name);
        strcpy(dob, p1.dob);
        strcpy(blood, p1.blood);
        ht = p1.ht;
        wt = p1.wt;
        pai = new person_additional_info;
        strcpy(pai->address, p1.pai->address);
        strcpy(pai->license, p1.pai->license);
        strcpy(pai->insurance, p1.pai->insurance);
        pai->contact = p1.pai->contact;
        count++;
    }

    ~person() { // Destructor
        delete pai;
        cout << "I am in Destructor for person" << endl;
    }

    static void showcount() { // Static member function
        cout << "\nNo of records count = " << count << "\n";
    }

    void getdata(const char* name); // Input function
    inline void display();          // Inline function declaration
};

void person::getdata(const char* name) {
    strcpy(this->name, name);
    cout << "\nEnter date of birth: ";
    cin >> dob;
    cout << "\nEnter blood group: ";
    cin >> blood;
    cout << "\nEnter height: ";
    cin >> ht;
    cout << "\nEnter weight: ";
    cin >> wt;
    cout << "\nEnter address: ";
    cin >> pai->address;
    cout << "\nEnter license number: ";
    cin >> pai->license;
    cout << "\nEnter insurance policy number: ";
    cin >> pai->insurance;
    cout << "\nEnter contact number: ";
    cin >> pai->contact;
    count++;
}

// Inline function definition
void person::display() {
    cout << "\t" << name;
    cout << "\t" << dob;
    cout << "\t" << blood;
    cout << "\t" << ht;
    cout << "\t" << wt;
    cout << "\t" << pai->address;
    cout << "\t" << pai->license;
    cout << "\t" << pai->insurance;
    cout << "\t\t" << pai->contact;
}

int person::count = 0; // Static variable initialization

int main() {
    person* p1 = new person;  // Call default constructor & dynamic memory allocation
    person* p2 = new person(*p1); // Call copy constructor

    cout << "\tName\tDOB\tBlood\tHt\tWt\tAddress\tLicense\tInsurance\tContact\n";
    cout << "Default Constructor Values:\n";
    p1->display();
    cout << "\nCopy Constructor Values:\n";
    p2->display();

    int n;
    cout << "\nEnter how many records you want: ";
    cin >> n;

    person* p3 = new person[n]; // Dynamically allocate array of objects
    char name[20];
    int ch, x = 0;

    do {
        cout << "\nWelcome to Personal Database System";
        cout << "\n1. Enter the record";
        cout << "\n2. Display the record";
        cout << "\n3. Exit";
        cout << "\nEnter your choice: ";
        cin >> ch;

        switch (ch) {
        case 1:
            if (x < n) {
                cout << "\nEnter the Name: ";
                cin >> name;
                p3[x].getdata(name);
                person::showcount(); // Calls static function
                x++;
            } else {
                cout << "No more records can be added.\n";
            }
            break;
        case 2:
            cout << "\tName\tDOB\tBlood\tHt\tWt\tAddress\tLicense\tInsurance\tContact\n";
            for (int i = 0; i < x; i++) {
                p3[i].display();
                cout << endl;
            }
            break;
        case 3:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice! Try again.\n";
        }
    } while (ch != 3);

    delete[] p3; // Release memory for array
    delete p1;   // Release dynamic memory
    delete p2;

    return 0;
}